<jittershader name="slidescan">
	<description>
	Oscillation slide/scan effect.
	</description>
	<param name="time" type="float" default="0.0" />
	<param name="preview" type="bool" default="false" />	
	<param name="warp" type="float" default="0.005" />
	<param name="bands" type="float" default="5." />
	<param name="rollRate" type="float" default="2.5" />
	<param name="rollAmount" type="float" default=".15" />	
	<language name="glsl" version="2.1">
		<bind param="time" program="fp" />
		<bind param="bands" program="fp" />
		<bind param="preview" program="fp" />
		<bind param="warp" program="fp" />
		<bind param="rollRate" program="fp" />
		<bind param="rollAmount" program="fp" />
		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

//adapted from a shader found here: https://github.com/genekogan/Processing-Shader-Examples/blob/master/TextureShaders/data/pixelrolls.glsl

uniform sampler2DRect tex0;
varying vec2 texcoord0;
varying vec2 texdim0;

uniform bool preview;
uniform float time;
uniform float warp;
uniform float bands;
uniform float rollRate;
uniform float rollAmount;

void main()
{
	// get uv coordinates
	vec2 uv = texcoord0/texdim0;
	
	// subtract from uv.x the distance we are in the band...
	// this is actually what creates the bands

	// this skews the bands internally... 
		// uv.x -= mod(uv.x, 1.0 / bands)*0.999;		
	// (multiplying or dividing the modulus will distort each individual x pos)
	
	uv.x -= mod(uv.x, 1.0 / bands)*(1. - warp);
	
	// modulate the y axis
	// mod(position * modulating_roll,1.0)
	// I think 1.0 at the end actually allows it to wrap properly. yep.
	// trying manipulating x or y
	uv.x = mod(uv.y + rollAmount * sin(rollRate * time * uv.x/2.), 1.0);		
	//uv.x = mod(uv.y + rollAmount * sin(rollRate * time), 1.0);	//SOLID ZOOMY	
	// get the color (and convert coords BACK from uv)
	vec4 color = texture2DRect(tex0, uv*texdim0);
	
	if(texcoord0.x > (texdim0.x/2) && preview){
		vec2 pos = texcoord0;
		pos.x -= texdim0/2.;
		gl_FragColor = texture2DRect(tex0, pos);
	}else{
		gl_FragColor = color;
	}
}

]]>
		</program>
	</language>
</jittershader>
